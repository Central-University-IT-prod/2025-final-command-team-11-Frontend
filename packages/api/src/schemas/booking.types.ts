/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/bookings/admin/{userId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID юзера */
        userId: string;
      };
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Создать бронирование
     * @description Создает новое бронирование для указанного рабочего места на заданный период времени.
     *     В случае успеха возвращает созданное бронирование.
     *
     */
    post: operations["createBookingForAdmin"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список всех бронирований (только для админа)
     * @description Возвращает список всех бронирований.
     *
     */
    get: operations["listAllBookings"];
    put?: never;
    /**
     * Создать бронирование
     * @description Создает новое бронирование для указанного рабочего места на заданный период времени.
     *     В случае успеха возвращает созданное бронирование.
     *
     */
    post: operations["createBooking"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/my": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить список моих бронирований
     * @description Возвращает список всех бронирований, созданных текущим пользователем.
     *
     */
    get: operations["listMyBookings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/{bookingId}": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    /**
     * Получить бронирование по ID
     * @description Возвращает информацию о бронировании по его уникальному идентификатору.
     *
     */
    get: operations["getBookingById"];
    put?: never;
    post?: never;
    /**
     * Удалить бронирование по ID
     * @description Удаляет бронирование по его уникальному идентификатору.
     *
     */
    delete: operations["deleteBooking"];
    options?: never;
    head?: never;
    /**
     * Обновить бронирование по ID
     * @description Обновляет время начала и/или окончания бронирования.
     *     В случае успеха возвращает обновленное бронирование.
     *
     */
    patch: operations["updateBooking"];
    trace?: never;
  };
  "/bookings/{bookingId}/orders": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    /**
     * Получить список заказов
     * @description Возвращает список всех заказов для указанного бронирования.
     *
     */
    get: operations["listOrders"];
    put?: never;
    /**
     * Создать заказ
     * @description Создает новый заказ для указанного бронирования.
     *     В случае успеха возвращает созданный заказ.
     *
     */
    post: operations["createOrder"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/bookings/{bookingId}/orders/{orderId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Удалить заказ
     * @description Удаляет заказ по его уникальному идентификатору.
     *
     */
    delete: operations["deleteOrders"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workloads/{entityId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить нагрузку на рабочее место
     * @description Возвращает информацию о нагрузке на указанное рабочее место за указанный период времени.
     *
     */
    get: operations["getWorkload"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/workloads/floors/{floorId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Получить нагрузку на этаж
     * @description Возвращает информацию о нагрузке на указанный этаж за указанный период времени.
     *
     */
    get: operations["getFloorWorkload"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /**
     * Format: int64
     * @description Время в формате Unix timestamp (в секундах)
     */
    Time: number;
    BookingEntity: {
      /** Format: uuid */
      id: string;
      /** @enum {string} */
      type: "ROOM" | "OPEN_SPACE";
      title: string;
      x: number;
      y: number;
      /** Format: uuid */
      floor_id: string;
      width: number;
      height: number;
      capacity: number;
      created_at: components["schemas"]["Time"];
      updated_at: components["schemas"]["Time"];
    };
    User: {
      /**
       * Format: uuid
       * @description Уникальный идентификатор пользователя
       */
      id: string;
      /** @description Электронная почта пользователя */
      email: string;
      /** @description Имя пользователя */
      name: string;
    };
    BookingCreate: {
      /**
       * Format: uuid
       * @description Уникальный идентификатор рабочего места
       */
      entity_id: string;
      /** @description Время начала бронирования (в секундах, Unix timestamp) */
      time_from: components["schemas"]["Time"];
      /** @description Время окончания бронирования (в секундах, Unix timestamp) */
      time_to: components["schemas"]["Time"];
    };
    BookingUpdate: {
      /** @description Новое время начала бронирования (в секундах, Unix timestamp) */
      time_from?: components["schemas"]["Time"];
      /** @description Новое время окончания бронирования (в секундах, Unix timestamp) */
      time_to?: components["schemas"]["Time"];
    };
    /** @example {
     *       "id": "550e8400-e29b-41d4-a716-446655440000",
     *       "entity": {
     *         "id": "550e8400-e29b-41d4-a716-446655440000",
     *         "type": "ROOM",
     *         "title": "booking entity title",
     *         "x": 42,
     *         "y": 42,
     *         "floor_id": "550e8400-e29b-41d4-a716-446655440000",
     *         "width": 42,
     *         "height": 42,
     *         "capacity": 42,
     *         "created_at": 1672502400,
     *         "updated_at": 1672502400
     *       },
     *       "user": {
     *         "id": "550e8400-e29b-41d4-a716-446655440001",
     *         "email": "user@example.com",
     *         "name": "John Doe",
     *         "time_from": 1672502400,
     *         "time_to": 1672506000
     *       },
     *       "orders": [],
     *       "created_at": 1672502400,
     *       "updated_at": 1672502400
     *     } */
    BookingInfo: {
      /**
       * Format: uuid
       * @description Уникальный идентификатор бронирования
       */
      id: string;
      entity: components["schemas"]["BookingEntity"];
      /** @description Информация о пользователе, создавшем бронирование */
      user: components["schemas"]["User"];
      /** @description Время начала бронирования (в секундах, Unix timestamp) */
      time_from: components["schemas"]["Time"];
      /** @description Время окончания бронирования (в секундах, Unix timestamp) */
      time_to: components["schemas"]["Time"];
      /** @description Список заказов, связанных с бронированием */
      orders: components["schemas"]["Order"][];
      /** @description Время создания бронирования (в секундах, Unix timestamp) */
      created_at: components["schemas"]["Time"];
      /** @description Время последнего обновления бронирования (в секундах, Unix timestamp) */
      updated_at: components["schemas"]["Time"];
    };
    Booking: {
      /**
       * Format: uuid
       * @description Уникальный идентификатор бронирования
       */
      id: string;
      /**
       * Format: uuid
       * @description Уникальный идентификатор рабочего места
       */
      entity_id: string;
      /**
       * Format: uuid
       * @description Уникальный идентификатор пользователя, создавшего бронирование
       */
      user_id: string;
      /** @description Время начала бронирования (в секундах, Unix timestamp) */
      time_from: components["schemas"]["Time"];
      /** @description Время окончания бронирования (в секундах, Unix timestamp) */
      time_to: components["schemas"]["Time"];
      /** @description Время создания бронирования (в секундах, Unix timestamp) */
      created_at: components["schemas"]["Time"];
      /** @description Время последнего обновления бронирования (в секундах, Unix timestamp) */
      updated_at: components["schemas"]["Time"];
    };
    Workload: {
      /** @description Временная метка (в секундах, Unix timestamp) */
      time: components["schemas"]["Time"];
      /** @description Флаг, указывающий, свободно ли рабочее место в указанное время */
      is_free: boolean;
    }[];
    FloorWorkload: {
      entity: components["schemas"]["BookingEntity"];
      /** @description Флаг, указывающий, свободно ли рабочее место в указанное время */
      is_free: boolean;
    }[];
    /**
     * @description Заказ
     * @enum {string}
     */
    OrderThingEnum: "laptop" | "eboard" | "coffee";
    Order: {
      /**
       * Format: uuid
       * @description Уникальный идентификатор заказа
       */
      id: string;
      /**
       * Format: uuid
       * @description Уникальный идентификатор бронирования, к которому относится заказ
       */
      booking_id: string;
      /** @description Флаг, указывающий, выполнен ли заказ */
      completed: boolean;
      /** @description Заказ */
      thing: components["schemas"]["OrderThingEnum"];
      /** @description Время создания заказа (в секундах, Unix timestamp) */
      created_at: components["schemas"]["Time"];
      /** @description Время последнего обновления заказа (в секундах, Unix timestamp) */
      updated_at: components["schemas"]["Time"];
    };
    OrderCreate: {
      /** @description Заказ */
      thing: components["schemas"]["OrderThingEnum"];
    };
  };
  responses: {
    /** @description Некорректный запрос */
    Response400: {
      headers: Record<string, unknown>;
      content: {
        "application/json": {
          /** @description Сообщение об ошибке */
          message?: string;
        };
      };
    };
    /** @description Oшибка аутентификации */
    Response401: {
      headers: Record<string, unknown>;
      content?: never;
    };
    /** @description Ресурс не найден */
    Response404: {
      headers: Record<string, unknown>;
      content: {
        "application/json": {
          /**
           * @description Тип ресурса, который не был найден
           * @enum {string}
           */
          resource?: "Floor" | "BookingEntity" | "Booking" | "Order" | "Guest";
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  createBookingForAdmin: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID юзера */
        userId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "entity_id": "550e8400-e29b-41d4-a716-446655440000",
         *       "time_from": 1672502400,
         *       "time_to": 1672506000
         *     } */
        "application/json": components["schemas"]["BookingCreate"];
      };
    };
    responses: {
      /** @description Бронирование успешно создано */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Booking"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      /** @description Нет свободных мест на указанное время. или неверая роль */
      403: {
        headers: Record<string, unknown>;
        content?: never;
      };
      404: components["responses"]["Response404"];
      /** @description Уже существует бронирование на указанное время */
      409: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listAllBookings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Список бронирований */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["BookingInfo"][];
        };
      };
      401: components["responses"]["Response401"];
      /** @description недостаточно прав */
      403: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  createBooking: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "entity_id": "550e8400-e29b-41d4-a716-446655440000",
         *       "time_from": 1672502400,
         *       "time_to": 1672506000
         *     } */
        "application/json": components["schemas"]["BookingCreate"];
      };
    };
    responses: {
      /** @description Бронирование успешно создано */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Booking"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      /** @description Нет свободных мест на указанное время */
      403: {
        headers: Record<string, unknown>;
        content?: never;
      };
      404: components["responses"]["Response404"];
      /** @description Уже существует бронирование на указанное время */
      409: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listMyBookings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Список бронирований */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["BookingInfo"][];
        };
      };
      401: components["responses"]["Response401"];
    };
  };
  getBookingById: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Бронирование найдено */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["BookingInfo"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
  deleteBooking: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Бронирование успешно удалено */
      204: {
        headers: Record<string, unknown>;
        content?: never;
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
  updateBooking: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "time_from": 1672502400,
         *       "time_to": 1672506000
         *     } */
        "application/json": components["schemas"]["BookingUpdate"];
      };
    };
    responses: {
      /** @description Бронирование успешно обновлено */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Booking"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      /** @description Нет свободных мест на указанное время */
      403: {
        headers: Record<string, unknown>;
        content?: never;
      };
      404: components["responses"]["Response404"];
      /** @description Уже существует бронирование на указанное время */
      409: {
        headers: Record<string, unknown>;
        content?: never;
      };
    };
  };
  listOrders: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Список заказов */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Order"][];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
  createOrder: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        /** @example {
         *       "thing": "laptop"
         *     } */
        "application/json": components["schemas"]["OrderCreate"];
      };
    };
    responses: {
      /** @description Заказ успешно создан */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Order"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
  deleteOrders: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description ID бронирования */
        bookingId: string;
        /** @description ID заказа */
        orderId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Заказ успешно удален */
      204: {
        headers: Record<string, unknown>;
        content?: never;
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
  getWorkload: {
    parameters: {
      query: {
        /** @description Время начала периода (в секундах, Unix timestamp) */
        timeFrom: components["schemas"]["Time"];
        /** @description Время окончания периода (в секундах, Unix timestamp) */
        timeTo: components["schemas"]["Time"];
      };
      header?: never;
      path: {
        /** @description ID рабочего места */
        entityId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Информация о нагрузке */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["Workload"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
  getFloorWorkload: {
    parameters: {
      query: {
        /** @description Время начала периода (в секундах, Unix timestamp) */
        timeFrom: components["schemas"]["Time"];
        /** @description Время окончания периода (в секундах, Unix timestamp) */
        timeTo: components["schemas"]["Time"];
      };
      header?: never;
      path: {
        /** @description ID этажа */
        floorId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Информация о нагрузке */
      200: {
        headers: Record<string, unknown>;
        content: {
          "application/json": components["schemas"]["FloorWorkload"];
        };
      };
      400: components["responses"]["Response400"];
      401: components["responses"]["Response401"];
      404: components["responses"]["Response404"];
    };
  };
}
