/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/booking/{id}/access": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check user access
     * @description Check status of user booking or invitation for nearest 12 hours. Avaliable only for ADMINs
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful check access. Status can has value READY, NOT_READY or PENDING */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["BookingAccess"];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/booking/{id}/guests": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get invites
     * @description Get invites of room.
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Booking id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfull get */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Guest"][];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Not your booking */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    /**
     * Create invite
     * @description Create invite to room.
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Booking id */
          id: string;
        };
        cookie?: never;
      };
      /** @description User Email */
      requestBody: {
        content: {
          "application/json": components["schemas"]["GuestId"];
        };
      };
      responses: {
        /** @description Successfull invite */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Not your booking */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/booking/{id}/guests/{email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete invite
     * @description Delete invite to room.
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Booking id */
          id: string;
          /** @description Email */
          email: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successfull get */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Guest"][];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Not your booking */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/booking/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get stats
     * @description Get stats for booking creations. Avaliable only for ADMINs
     */
    get: {
      parameters: {
        query?: {
          /** @description Parametr for stats specify. Must be 'day', 'week' or 'month' */
          filter?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful get of stats */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Stats"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/layout/entities/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get entity by id
     * @description Get entity by id
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Entity id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description ok */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["BookingEntity"];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/layout/floors": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get floors
     * @description Get list of floor
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Succesful get of floors */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["FloorEntity"][];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    /**
     * Save layout
     * @description Save layout. Only for ADMINs
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Upsert data */
      requestBody: {
        content: {
          "application/json": components["schemas"]["UpsertFloor"];
        };
      };
      responses: {
        /** @description OK */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Message"];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/layout/floors/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get entities for floor
     * @description Get entities for floor
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Floor id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful get entities */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["BookingEntity"][];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    /**
     * Delete floor
     * @description Delete floor. Only for ADMINs
     */
    delete: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description Floor id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful delete */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/orders": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get orders
     * @description Get orders with pagination and filters. Only for ADMINs.
     */
    get: {
      parameters: {
        query?: {
          /** @description Page */
          page?: number;
          /** @description Size */
          size?: number;
          /** @description Completed. Complteted must be 'true', 'false' or '' */
          completed?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Succesfull get of orders */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Orders"];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/orders/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Set order completed
     * @description Set order. Only for ADMINs
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description user id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful set order status */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/orders/stats": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get stats
     * @description Get stats of order creations. Only for ADMINs.
     */
    get: {
      parameters: {
        query?: {
          /** @description Filter */
          filter?: string;
        };
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description OK */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["Stats"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/verification/{id}/check": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Check verification
     * @description Returns user verification data. Only for ADMINs
     */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Successful response */
        200: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["VerificationData"];
          };
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/verification/{id}/set": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Set verification
     * @description Set user verification data. Only for ADMINs
     */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path: {
          /** @description User id */
          id: string;
        };
        cookie?: never;
      };
      requestBody?: {
        content: {
          "multipart/form-data": {
            /**
             * Format: binary
             * @description passport image
             */
            passport?: string;
          };
        };
      };
      responses: {
        /** @description Successful setup of verification data. */
        204: {
          headers: Record<string, unknown>;
          content?: never;
        };
        /** @description Id must be uuid */
        400: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Unauth */
        401: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Invalid role */
        403: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
        /** @description Something going wrong... */
        500: {
          headers: Record<string, unknown>;
          content: {
            "application/json": components["schemas"]["JsonError"];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    BookingAccess: {
      booking_id?: string;
      status?: string;
    };
    BookingEntity: {
      capacity?: number;
      created_at?: string;
      height?: number;
      id?: string;
      title?: string;
      type?: components["schemas"]["BookingType"];
      updated_at?: string;
      width?: number;
      x?: number;
      y?: number;
    };
    Entity: {
      capacity?: number;
      floor_id?: string;
      height?: number;
      id?: string;
      title?: string;
      type?: components["schemas"]["BookingType"];
      width?: number;
      x?: number;
      y?: number;
    };
    FloorEntity: {
      created_at?: string;
      id?: string;
      name?: string;
      updated_at?: string;
    };
    Guest: {
      booking_id?: string;
      created_at?: string;
      email?: string;
    };
    GuestId: {
      email?: string;
    };
    Order: {
      booking_id?: string;
      booking_title?: string;
      completed?: boolean;
      created_at?: string;
      id?: string;
      thing?: string;
      updated_at?: string;
    };
    Orders: {
      count?: number;
      orders?: components["schemas"]["Order"][];
    };
    Stats: {
      count?: number;
    };
    UpsertFloor: {
      entities?: components["schemas"]["Entity"][];
      id?: string;
      name?: string;
    };
    VerificationData: {
      passport?: string;
      verified?: boolean;
    };
    JsonError: {
      error?: string;
    };
    Message: {
      message?: string;
    };
    /** @enum {string} */
    BookingType: "ROOM" | "OPEN_SPACE";
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
